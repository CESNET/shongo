resource create
resource modify

use Class::Agreement;
use Params::Validate ();  # don't pollute current namespace as it would create conflicts with Class::Assert

invariant sub {
	my ($self) = shift;
	return (defined $self->{_NAME});
};

invariant sub {
	my ($self) = shift;
	return (defined $self->{_H320NUMBER});
};


precondition new => sub {
	Params::Validate::validate_pos(@_,
			{type => Params::Validate::SCALAR}, # $class, class itself
			{type => Params::Validate::OBJECT, isa => 'Net::H350::Entry', optional => 1}, # $h350entry, object with H350 entry to construct record from
			);
};
sub new {
	my $class = shift;
	my $h350entry = shift;

	my $self;
	$self = {
		_H350ENTRY => undef,
		_NAME => "",
		_H323NUMBERS_REF => undef,
		_H323IDS_REF => undef,
		_H323IPS_REF => undef,
		_H323URLS_REF => undef,
		_SIPURIS_REF => undef,
		_SIPIPS_REF => undef,
		_H320NUMBER => "",
		_GENERIC_URLS_REF => undef,  # needed for special cases like TANDBERG Movi, where we have a generic URI/URL for each contact and generally, we may have no clue on type of it
		_PHONE_NUMBER => "",  # this is representation of ordinary phone number, if the device is connected also as a phone; it is not covered by H.350 standard nor by Net::H350::Entry
	};
	bless $self, $class;
	if (defined $h350entry && $h350entry->is_commObject) {
		$self->set_h350entry($h350entry);
	}
	return $self;
}
postcondition new => sub {
	my @result = result;
	Params::Validate::validate_pos(@result,
			{type => Params::Validate::OBJECT, isa => 'AddressBook::Record'}, # constructed
	);
};


precondition _add_attr => sub {
	Params::Validate::validate_pos(@_,
			{type => Params::Validate::OBJECT}, # $self
			{type => Params::Validate::OBJECT, isa => "Net::H350::Entry"}, # $entry, the H.350 record to add the attribute to
			{type => Params::Validate::SCALAR, regex => qr#^\S+$#}, # $methodname, the flexible part of the method name
			{type => Params::Validate::SCALAR}, # $value, the value to add
			);
};

postcondition _record_to_abk => sub {
	my @result = result;
	Params::Validate::validate_pos(@result,
			{type => Params::Validate::SCALAR, callbacks => {
						'twenty_seven' => sub { my @lines = split(/\n/, $_[0]); return (@lines == 27); },   # text with 27 lines
					}
			},
			);
};


