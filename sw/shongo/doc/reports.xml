<?xml version="1.0" encoding="UTF-8" ?>

<reports xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="reports.xsd">

    <scopes>
        <scope>
            <name>jade</name>
            <module>common-api</module>
            <class-name>cz.cesnet.shongo.JadeReportSet</class-name>
        </scope>

        <scope>
            <name>common</name>
            <module>common-api</module>
            <class-name>cz.cesnet.shongo.CommonReportSet</class-name>
        </scope>

        <scope>
            <name>controller</name>
            <module>controller-api</module>
            <class-name>cz.cesnet.shongo.controller.ControllerReportSet</class-name>
        </scope>

        <scope>
            <name>scheduler</name>
            <module>controller</module>
            <class-name>cz.cesnet.shongo.controller.scheduler.SchedulerReportSet</class-name>
        </scope>

        <scope>
            <name>executor</name>
            <module>controller</module>
            <class-name>cz.cesnet.shongo.controller.executor.ExecutorReportSet</class-name>
        </scope>
    </scopes>

    <scope name="jade">

        <template extends="cz.cesnet.shongo.JadeReport">
            <serializable>true</serializable>
            <exception base-class="cz.cesnet.shongo.JadeException"/>
        </template>

        <report>
            <id>unknown-error</id>
            <classification severity="error"/>
            <params>
                <param name="description" type="String"/>
            </params>
            <description>
                Unknown error: ${description}
            </description>
            <example>
                TODO:
            </example>
            <resolution>stop</resolution>
        </report>

        <report>
            <id>agent-not-found</id>
            <classification severity="error"/>
            <params>
                <param name="receiverAgent" type="String"/>
            </params>
            <description>
                Receiver agent ${receiverAgent} is not available now.
            </description>
            <example>
                TODO:
            </example>
            <resolution>try-again</resolution>
        </report>

        <report>
            <id>agent-not-started</id>
            <classification severity="error"/>
            <params>
                <param name="senderAgent" type="String"/>
            </params>
            <description>
                Sender agent ${senderAgent} is not started yet.
            </description>
            <example>
                TODO:
            </example>
            <resolution>try-again</resolution>
        </report>

        <report abstract="true">
            <id>command-abstract-error</id>
            <classification severity="error"/>
            <params>
                <param name="command" type="String"/>
            </params>
            <description>
                Abstract command error.
            </description>
        </report>

        <report extends="command-abstract-error">
            <id>command-unknown-error</id>
            <params>
                <param name="description" type="String"/>
            </params>
            <description>
                Unknown error in command ${command}: ${description}
            </description>
            <example>
                TODO:
            </example>
            <resolution>stop</resolution>
        </report>

        <report extends="command-abstract-error">
            <id>command-timeout</id>
            <params>
                <param name="receiverAgent" type="String"/>
            </params>
            <description>
                Command ${command} send to ${receiverAgent} has timeout.
            </description>
            <example>
                TODO:
            </example>
            <resolution>try-again</resolution>
        </report>

        <report extends="command-abstract-error">
            <id>command-not-supported</id>
            <params>
                <param name="receiverAgent" type="String"/>
            </params>
            <description>
                Receiver agent ${receiverAgent} doesn't implement command ${command}.
            </description>
            <example>
                TODO:
            </example>
            <resolution>stop</resolution>
        </report>

        <report extends="command-abstract-error">
            <id>command-refused</id>
            <params>
                <param name="receiverAgent" type="String"/>
            </params>
            <description>
                Receiver agent ${receiverAgent} has refused command ${command}.
            </description>
            <example>
                TODO:
            </example>
            <resolution>stop</resolution>
        </report>

        <report extends="command-abstract-error">
            <id>command-not-understood</id>
            <params>
                <param name="receiverAgent" type="String"/>
            </params>
            <description>
                Receiver agent ${receiverAgent} didn't understand command ${command}.
            </description>
            <example>
                TODO:
            </example>
            <resolution>stop</resolution>
        </report>

        <report extends="command-abstract-error">
            <id>command-failed</id>
            <classification severity="error"/>
            <params>
                <param name="receiverAgent" type="String"/>
                <param name="reason" type="String"/>
            </params>
            <description>
                Receiver agent ${receiverAgent} threw CommandException while processing command ${command}: ${reason}
            </description>
            <example>
                TODO:
            </example>
            <resolution>stop</resolution>
        </report>

        <report extends="command-abstract-error">
            <id>command-result-decoding-failed</id>
            <classification severity="error"/>
            <params>
                <param name="senderAgent" type="String"/>
            </params>
            <description>
                Sender agent ${senderAgent} cannot decode response from command ${command}.
            </description>
            <example>
                TODO:
            </example>
            <resolution>stop</resolution>
        </report>

    </scope>

    <scope name="common">

        <template>
            <api-fault-code>0</api-fault-code>
            <exception runtime="true"/>
        </template>

        <report>
            <id>unknown-error</id>
            <classification severity="error"/>
            <params>
                <param name="description" type="String"/>
            </params>
            <description>
                Unknown error: ${description}
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api">
                <description>Unknown error</description>
            </user>
            <domain-admin visible="true" via="email"/>
        </report>

        <report>
            <id>type-illegal-value</id>
            <classification severity="error"/>
            <params>
                <param name="type" type="String"/>
                <param name="value" type="String"/>
            </params>
            <description>
                Value ${value} is illegal for type ${type}.
            </description>
            <example>
                TODO:
                -Enum
                -Date/Time
                -Period
                -Interval
                -Partial Date/Time
                -DeviceResource.Mode
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>class-undefined</id>
            <classification severity="error"/>
            <params>
                <param name="class" type="String"/>
            </params>
            <description>
                Class ${class} is not defined.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>class-instantiation-error</id>
            <classification severity="error"/>
            <params>
                <param name="class" type="String"/>
            </params>
            <description>
                Class ${class} cannot be instanced.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>class-attribute-undefined</id>
            <classification severity="error"/>
            <params>
                <param name="class" type="String"/>
                <param name="attribute" type="String"/>
            </params>
            <description>
                Attribute ${attribute} is not defined in class ${class}.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>class-attribute-type-mismatch</id>
            <classification severity="error"/>
            <params>
                <param name="class" type="String"/>
                <param name="attribute" type="String"/>
                <param name="requiredType" type="String"/>
                <param name="presentType" type="String"/>
            </params>
            <description>
                Type mismatch of value in attribute ${attribute} in class ${class}.
                Present type ${presentType} doesn't match required type ${requiredType}.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>class-attribute-required</id>
            <classification severity="error"/>
            <params>
                <param name="class" type="String"/>
                <param name="attribute" type="String"/>
            </params>
            <description>
                Attribute ${attribute} in class ${class} wasn't present but it is required.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>class-attribute-readonly</id>
            <classification severity="error"/>
            <params>
                <param name="class" type="String"/>
                <param name="attribute" type="String"/>
            </params>
            <description>
                Value for attribute ${attribute} in class ${class} was present but the attribute is read-only.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>class-collection-required</id>
            <classification severity="error"/>
            <params>
                <param name="class" type="String"/>
                <param name="collection" type="String"/>
            </params>
            <description>
                Collection ${collection} in class ${class} wasn't present or was empty but it is required.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>collection-item-null</id>
            <classification severity="error"/>
            <params>
                <param name="collection" type="String"/>
            </params>
            <description>
                Null item cannot be present in collection ${collection}.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>collection-item-type-mismatch</id>
            <classification severity="error"/>
            <params>
                <param name="collection" type="String"/>
                <param name="requiredType" type="String"/>
                <param name="presentType" type="String"/>
            </params>
            <description>
                Collection ${collection} contains item of type ${presentType} which doesn't match the
                required type ${requiredType}.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>entity-not-found</id>
            <classification severity="error"/>
            <params>
                <param name="entity" type="String"/>
                <param name="id" type="String"/>
            </params>
            <description>
                Entity ${entity} with identifier ${id} was not found.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>entity-invalid</id>
            <classification severity="error"/>
            <params>
                <param name="entity" type="String"/>
                <param name="reason" type="String"/>
            </params>
            <description>
                Entity ${entity} validation failed: ${reason}
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>entity-not-deletable-referenced</id>
            <classification severity="error"/>
            <params>
                <param name="entity" type="String"/>
                <param name="id" type="String"/>
            </params>
            <description>
                Entity ${entity} with identifier ${id} cannot be deleted because it is still referenced.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

    </scope>

    <scope name="controller">

        <template>
            <api-fault-code>100</api-fault-code>
            <exception runtime="true"/>
        </template>

        <report>
            <id>acl-invalid-role</id>
            <classification severity="error"/>
            <params>
                <param name="entity" type="String"/>
                <param name="role" type="String"/>
            </params>
            <description>
                ACL Role ${role} is invalid for entity ${entity}.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>security-invalid-token</id>
            <classification severity="error"/>
            <params>
                <param name="token" type="String"/>
            </params>
            <description>
                Invalid security token ${token}.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
            <domain-admin visible="true" via="email"/>
        </report>

        <report>
            <id>security-not-authorized</id>
            <classification severity="error"/>
            <params>
                <param name="action" type="String"/>
            </params>
            <description>
                You are not authorized to ${action}.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>device-command-failed</id>
            <classification severity="error"/>
            <params>
                <param name="device" type="String" resource-id="true"/>
                <param name="command" type="String"/>
                <param name="jadeReport" type="JadeReport"/>
            </params>
            <description>
                Command ${command} for device ${device} failed: ${jadeReport}
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
            <domain-admin visible="true" via="email"/>
            <resource-admin visible="true" via="email"/>
        </report>

        <report>
            <id>identifier-invalid</id>
            <classification severity="error"/>
            <params>
                <param name="id" type="String"/>
            </params>
            <description>
                Identifier ${id} is invalid.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>identifier-invalid-domain</id>
            <classification severity="error"/>
            <params>
                <param name="id" type="String"/>
                <param name="requiredDomain" type="String"/>
            </params>
            <description>
                Identifier ${id} doesn't belong to domain ${requiredDomain}.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>identifier-invalid-type</id>
            <classification severity="error"/>
            <params>
                <param name="id" type="String"/>
                <param name="requiredType" type="String"/>
            </params>
            <description>
                Identifier ${id} isn't of required type ${requiredType}.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>reservation-request-not-modifiable</id>
            <classification severity="error"/>
            <params>
                <param name="id" type="String"/>
            </params>
            <description>
                Reservation request with identifier ${id} cannot be modified or deleted.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

        <report>
            <id>reservation-request-empty-duration</id>
            <classification severity="error"/>
            <description>
                Reservation request time slot must not be empty.
            </description>
            <example>
                TODO:
            </example>
            <user visible="true" via="api"/>
        </report>

    </scope>

    <scope name="scheduler">

        <template extends="cz.cesnet.shongo.controller.scheduler.SchedulerReport">
            <persistent>true</persistent>
            <exception base-class="cz.cesnet.shongo.controller.scheduler.SchedulerException"/>
        </template>

        <!--
          - RESOURCE
          -->

        <report>
            <id>resource</id>
            <classification severity="info"/>
            <params>
                <param name="resource" type="Resource"/>
            </params>
            <description>
                Resource ${resource}.
            </description>
        </report>

        <report extends="resource">
            <id>resource-not-allocatable</id>
            <classification severity="error"/>
            <description>
                Resource ${resource} is not allocatable.
            </description>
        </report>

        <report extends="resource">
            <id>resource-already-allocated</id>
            <classification severity="error"/>
            <description>
                Resource ${resource} is already allocated.
            </description>
        </report>

        <report extends="resource">
            <id>resource-not-available</id>
            <classification severity="error"/>
            <params>
                <param name="maxDateTime" type="DateTime"/>
            </params>
            <description>
                Resource ${resource} is not available for the requested time slot.
                The maximum date/time for which the resource can be allocated is ${maxDateTime}.
            </description>
        </report>

        <report extends="resource">
            <id>resource-not-endpoint</id>
            <classification severity="error"/>
            <description>
                Resource ${resource} is not endpoint.
            </description>
        </report>

        <report extends="resource">
            <id>resource-multiple-requested</id>
            <classification severity="error"/>
            <description>
                Resource ${resource} is requested multiple times.
            </description>
        </report>

        <report>
            <id>resource-not-found</id>
            <classification severity="error"/>
            <params>
                <param name="technologies" type="Set" type-element="Technology"/>
            </params>
            <description>
                No available resource was found for the following specification:
                  Technologies: ${technologies}
            </description>
        </report>


        <!--
          - EXECUTABLE
          -->

        <report>
            <id>executable-reusing</id>
            <classification severity="info"/>
            <params>
                <param name="executable" type="Executable"/>
            </params>
            <description>
                Reusing existing ${executable}.
            </description>
        </report>


        <!--
          - COMPARTMENT
          -->

        <report>
            <id>compartment-not-enough-endpoint</id>
            <classification severity="error"/>
            <description>
                Not enough endpoints are requested for the compartment.
            </description>
        </report>

        <report>
            <id>compartment-assign-alias-to-external-endpoint</id>
            <classification severity="error"/>
            <description>
                Cannot assign alias to allocated external endpoint.
            </description>
        </report>


        <!--
          - CONNECTION between two endpoints
          -->

        <report abstract="true">
            <id>connection</id>
            <params>
                <param name="endpointFrom" type="Endpoint"/>
                <param name="endpointTo" type="Endpoint"/>
            </params>
        </report>

        <report extends="connection">
            <id>connection-between</id>
            <classification severity="info"/>
            <params>
                <param name="technology" type="Technology"/>
            </params>
            <description>
                Creating connection between ${endpointFrom} and ${endpointTo} in technology ${technology}.
            </description>
        </report>

        <report extends="connection">
            <id>connection-from-to</id>
            <classification severity="info"/>
            <description>
                Creating connection from ${endpointFrom} to ${endpointTo}.
            </description>
        </report>

        <report extends="connection">
            <id>connection-to-multiple</id>
            <classification severity="error"/>
            <description>
                Cannot create connection from ${endpointFrom} to ${endpointTo},
                because the target represents multiple endpoints (not supported yet).
            </description>
        </report>


        <!--
          - RESERVATION
          -->

        <report abstract="true">
            <id>reservation</id>
            <params>
                <param name="reservation" type="Reservation"/>
            </params>
        </report>

        <report extends="reservation">
            <id>reservation-not-available</id>
            <classification severity="error"/>
            <description>
                Provided reservation ${reservation} is not available.
            </description>
        </report>

        <report extends="reservation">
            <id>reservation-not-usable</id>
            <classification severity="error"/>
            <description>
                Provided reservation ${reservation} is not usable,
                because provided date/time slot doesn't contain the requested.
            </description>
        </report>

        <report extends="reservation">
            <id>reservation-reusing</id>
            <classification severity="info"/>
            <description>
                Reusing reservation ${reservation}.
            </description>
        </report>


        <!--
          - VALUE
          -->

        <report>
            <id>value-already-allocated</id>
            <classification severity="error"/>
            <params>
                <param name="value" type="String"/>
            </params>
            <description>
                Value ${value} is already allocated.
            </description>
        </report>

        <report>
            <id>value-invalid</id>
            <classification severity="error"/>
            <params>
                <param name="value" type="String"/>
            </params>
            <description>
                Value ${value} is invalid.
            </description>
        </report>

        <report>
            <id>value-not-available</id>
            <classification severity="error"/>
            <description>
                No value is available.
            </description>
        </report>


        <!--
          - ALLOCATING reports
          -->

        <report extends="resource">
            <id>allocating-resource</id>
            <classification severity="info"/>
            <description>
                Allocating resource ${resource}.
            </description>
        </report>

        <report>
            <id>allocating-alias</id>
            <classification severity="info"/>
            <params>
                <param name="technologies" type="Set" type-element="Technology"/>
                <param name="aliasTypes" type="Set" type-element="AliasType"/>
                <param name="value" type="String"/>
            </params>
            <description>
                Allocating alias for the following specification:
                \n  Technology: ${ifNull(technologies, "Any")}
                \n  Alias Type: ${ifNull(aliasTypes, "Any")}
                \n       Value: ${ifNull(value, "Any")}
            </description>
        </report>

        <report extends="resource">
            <id>allocating-value</id>
            <classification severity="info"/>
            <description>
                Allocating value in resource ${resource}.
            </description>
        </report>

        <report>
            <id>allocating-room</id>
            <classification severity="info"/>
            <params>
                <param name="technologies" type="List" type-element="TechnologySet"/>
                <param name="participantCount" type="Integer"/>
            </params>
            <description>
                Allocating room for the following specification:
                \n    Technology: ${technologies}
                \n  Participants: ${participantCount}
            </description>
        </report>

        <report>
            <id>allocating-compartment</id>
            <classification severity="info"/>
            <description>
                Allocating compartment.
            </description>
        </report>

        <report>
            <id>allocating-executable</id>
            <classification severity="info"/>
            <description>
                Allocating executable.
            </description>
        </report>


        <!--
          - INFORMATION reports
          -->

        <report>
            <id>specification-checking-availability</id>
            <classification severity="info"/>
            <description>
                Checking specification availability report.
            </description>
        </report>

        <report>
            <id>finding-available-resource</id>
            <classification severity="info"/>
            <description>
                Finding available resource.
            </description>
        </report>

        <report>
            <id>sorting-resources</id>
            <classification severity="info"/>
            <description>
                Sorting resources.
            </description>
        </report>


        <!--
          - ERROR reports
          -->

        <report>
            <id>specification-not-ready</id>
            <classification severity="error"/>
            <params>
                <param name="specification" type="Specification"/>
            </params>
            <description>
                Specification ${specification} is not ready.
            </description>
        </report>

        <report>
            <id>duration-longer-than-maximum</id>
            <classification severity="error"/>
            <params>
                <param name="duration" type="Period"/>
                <param name="maximumDuration" type="Period"/>
            </params>
            <description>
                Duration ${duration} is longer than maximum ${maximumDuration}.
            </description>
        </report>

        <report>
            <id>specification-not-allocatable</id>
            <classification severity="error"/>
            <params>
                <param name="specification" type="Specification"/>
            </params>
            <description>
                The specification ${className(specification)} is not supposed to be allocated.
            </description>
        </report>

        <report>
            <id>user-not-owner</id>
            <classification severity="error"/>
            <params>
                <param name="userId" type="String"/>
            </params>
            <description>
                User ${user(userId)} is not resource owner.
            </description>
        </report>

    </scope>

    <scope name="executor">

        <template extends="cz.cesnet.shongo.controller.executor.ExecutableReport">
            <persistent>true</persistent>
        </template>

        <report>
            <id>command-failed</id>
            <classification severity="error"/>
            <params>
                <param name="command" type="String"/>
                <param name="jadeReport" type="JadeReport"/>
            </params>
            <description>
                Command ${command} failed: ${jadeReport}
            </description>
            <example>
            </example>
            <domain-admin visible="true" via="email"/>
            <resource-admin visible="true" via="email"/>
            <resolution param="jadeReport"/>
        </report>

        <report>
            <id>room-not-started</id>
            <classification severity="error"/>
            <params>
                <param name="roomName" type="String"/>
            </params>
            <description>
                Cannot modify room ${roomName}, because it has not been started yet.
            </description>
            <example>
            </example>
            <domain-admin visible="true" via="email"/>
            <resource-admin visible="true" via="email"/>
            <resolution>try-again</resolution>
        </report>

    </scope>

</reports>