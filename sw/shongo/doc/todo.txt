* 2 paragraphs of shongo features

* Infrastructure
 - Change string identifier to "ZZ-shongo-hash"
 - Create H323_IP, SIP_IP alis types
 - Modify H323_URI to number@ip
 - Add pattern {range:min:max}

* Implement permissions

* Fix passing of user identity from authorization server through controller to adobe connect connector

* Web client
  - catch and format errors (e.g., request cannot be modified or deleted)
  - format request state errors
  - format executables state errors
  - improve scheduler error reports (alias allocation -> multiple providers what to show?)
  - permissions (accessing reservation requests)
  - document all possible errors and set reactions (for request and executor)
  * hide url parameters
  * do not allow to delete requests whose allocated reservations was provided to another request

* Executor
  - Retry in some error states (based on document)
  - Send info mails to resource admins (when resource fails)
  - Send info mails to shongo admin (when controller/connector throws unhandled exception)

* Permanent reservation request
  - Delete current permanent reservation request
  - Add forced option or higher priority (or mainstanance option
  - Executable should not be created, only empty reservation
  - Allow to not specify begin or end (infinite reservations)

* Reformat cmd-line client script to use the following style:
  cat <<EOF
    Test 1
    Test 2
  EOF

* Persist CommandFailure in CommandFailureReport
  - propagate executable reports through api

* Do not log requests/actions/commands for testing controller and client

* Web client
  -use one getReservations instead of multiple getReservation requests
  -implement better "back button"

* Executor
  -Store starting failed reports
  -Try to start executables in starting failed state (e.g., when agent was offline) or send info emails
   to administrators

* Update API
  -authentication/authorization

* Improve allocation failed reports
  -Max-future
  -Value already reserved

* Improve value generation performance

* Adobe Connector
 - single connection
 - thread safety

* Connector
 - test reconnecting of connectors when a device is restarted
 - authentication

* Client-CLI Shell.pm in parse_attributes the resulting hash should be processed and all json
  bool objects should be converted to 1/0

* Use HangUp instead of HangUpAll

* H.323 room endtime

* Refactorize web client to mod_perl

* Web clients - H.323 and Adobe Connect
  - runtime management (room, participants)

* Soft delete of reservation requests

* Permanent reservation
  - forced maintenance option
  - permanent reservation should try to reallocate all colliding reservations

* Make Cache thread safe (Scheduler and ResourceServiceImpl can cause reset() which reloads cache, and while
  the cache is reloading no one can use it)

* Implement allocation failed state to permanent reservations

* Refactorize Room.Options

* Add deviceResource attribute to Alias and fill it when the alias is evaluated on the DeviceResource and check
  assignment of this alias to proper DeviceResource

FUTURE:
-------
* Controller should check RoomProvider devices if theirs configured capacity doesn't exceed the real one and
  warning should be displayed if so (we don't have to force error message)

* Test cmd-line client in mvn test (Run cmd-line client test in maven testing)

* Use database migration (change database to some which allows for transaction ddl, e.g., postgresql)
  - Implement multiple dialects

* Create tests for Converter (and simplify Converter.convert() method)

* Persons, PersonSpecifications

* Add requested alias value attribute to AliasSpecification

* API synchronizovat pomoci
  http://java.net/projects/texdoclet/
  https://github.com/ePaul/ltxdoclet
  http://docs.oracle.com/javase/1.5.0/docs/tooldocs/windows/javadoc.html#doclet
  http://stackoverflow.com/questions/5869566/latex-javadoc-generation
