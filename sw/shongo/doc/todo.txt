* 2 paragraphs of shongo features

* Implement permissions

* Fix passing of user identity from authorization server through controller to adobe connect connector

* Create communication connector -> controller
  - make recursive jade communication working (A -> B, B -> A, B <- A, A <- B)
  - notify owners that room capacity exceeded
  - create CommandExecutor a Command.perform

* Web client
  - checkAvailableSpecification
  - lists of OWNERS and REUSERS in reservation request detail

* Document escalation procedures with Peter

* Resource Database
  - shall have only owners (owner = admin)
  - shall have 0:N emails where all administration info should be sent
  - each owner also receives all administration info unless he specified a preference that he doesn't want to receive it

* User preferences
  - timezone (stored in authorization server)
  - receive a resource administration info (stored in controller)

* Adobe Connect Connector
  - fix that room after modification is hidden in room list

* Timezone
  - show current timezone in web page
  - show current timezone in cmd-line client
  - allow user to select timezone

* Update API
  - interval (describe why interval cannot be formatted as start/duration)
  - remove normal/permanent reservation request
  - AliasGroupSpecification -> AliasSetSpecification

* Web client
  - format request state errors
  - format executables state errors
  - permissions (accessing reservation requests)
  * hide url parameters

* Executor
  - Retry in some error states (based on document)
  - Send info mails to resource admins (when resource fails)
  - Send info mails to shongo admin (when controller/connector throws unhandled exception)

* Allow extending the validity of the reservation

* Web client
  -use one getReservations instead of multiple getReservation requests

* Executor
  -Store starting failed reports
  -Try to start executables in starting failed state (e.g., when agent was offline) or send info emails
   to administrators

* Update API
  -authentication/authorization
  -identifier faults (and try to find all other faults and update them)

* Improve value generation performance

* Adobe Connector
 - single connection
 - thread safety

* Connector
 - test reconnecting of connectors when a device is restarted
 - authentication

* Client-CLI Shell.pm in parse_attributes the resulting hash should be processed and all json
  bool objects should be converted to 1/0

* Use HangUp instead of HangUpAll

* H.323 room endtime

* Refactorize web client to mod_perl

* Web clients - H.323 and Adobe Connect
  - runtime management (room, participants)

* Soft delete of reservation requests

* Permanent reservation
  - forced maintenance option
  - permanent reservation should try to reallocate all colliding reservations

* Make Cache thread safe (Scheduler and ResourceServiceImpl can cause reset() which reloads cache, and while
  the cache is reloading no one can use it)

* Implement allocation failed state to permanent reservations

* Refactorize Room.Options

* Add deviceResource attribute to Alias and fill it when the alias is evaluated on the DeviceResource and check
  assignment of this alias to proper DeviceResource

* Do not extend ParticipantSpecification from Specification and delete the SpecificationNotAllocatableReport
  (because all specification then will be allocatable)

* When modifying maximum future check whether it doesn't collide any reservation (do the same for all other attributes/capabilities)

* PeriodicDateTime should store the start as string with timezone because sql timestamp doesn't save timezone and
  the partial date/time may cause that it wont work in the user expected way ("2012" will not match "2012-01-01+0100" when matching in UTC)

FUTURE:
-------
* Controller should check RoomProvider devices if theirs configured capacity doesn't exceed the real one and
  warning should be displayed if so (we don't have to force error message)

* Test cmd-line client in mvn test (Run cmd-line client test in maven testing)

* Use database migration (change database to some which allows for transaction ddl, e.g., postgresql)
  - Implement multiple dialects

* Create tests for Converter (and simplify Converter.convert() method)

* Persons, PersonSpecifications

* Add requested alias value attribute to AliasSpecification

* API synchronizovat pomoci
  http://java.net/projects/texdoclet/
  https://github.com/ePaul/ltxdoclet
  http://docs.oracle.com/javase/1.5.0/docs/tooldocs/windows/javadoc.html#doclet
  http://stackoverflow.com/questions/5869566/latex-javadoc-generation
