/** 
 * Capability of a Resource. 
 */
Capability = Object {
}

/** 
 * Resource that can be scheduled. 
 */
Resource = Object {  
  /** Type of the Resource. */
  type: Enum {
    Device,
    DeviceComponent,
    PhysicalRoom,
    Other
  },
  
  /** Unique Identifier as defined in API document. */
  identifier: URN,

  /** Name of the Resource. */
  name: String,

  /** Capabilities that the Resource has. */
  capabilities: List<1:n> of Capability 

  TODO: Add all attributes 
}

/** 
 * Technology Enumeration. 
 */
Technology = Enum {
  H323,
  SIP,
  AdobeConnect
}

/** 
 * Videoconference Device. 
 */
DeviceResource = Object extends Resource {
  /** Resource Type is always Device. */
  type: Device,

  /** Physical Address of the Device. */
  address: IP-Address,

  /** Technologies that the Device supports. */
  technologies: List<1:n> of Technology,
}

/** 
 * Capability of a Device Resource. 
 */
DeviceCapability = Object {
  /** List of Device technologies for which is the capability applied. */
  technologies: * or List<1:n> of Technology
}

/** 
 * Format represents an Input/Output format by which
 * the Device is able to communicate.
 */
Format = Object {
  /** Available Audio Format. */
  audio: * or Object {
    codec: * or Enum {AC3, ...},
    bitrate: * or Enum {128Kb, ...}
  }
  /** Available Video Format. */
  video: * or Object {
    codec: * or Enum {H264, ...},
    resolution: * or Enum {CIF, ...}
  }
  /** Available Content Format. */
  content: * or Object {
    TODO: Specify content format
  }
}

/** 
 * Receive/Send capability allows a device to process a videoconference data. 
 */
ReceiveCapability = SendCapability = Object extends DeviceCapability {
  /** Input/Output Channels. */
  channels: * or List<1:n> of (Format or Object {
    /** Number of channels with same format. */
    count: * or Integer,
    /** Format specification. */
    template: Format
  })
}

/** 
 * Capability allows a device to participate in a 2-point videoconference
 * (without a device with Mix or VirtualRooming capability).
 */
StandaloneCapability = Object extends DeviceCapability {  
}

/** 
 * Mix capability allows a device to host a single multipoint videoconference. 
 *
 * @RequireCapability(Receive, Send)
 */
MixCapability = Object extends DeviceCapability {  
}

/** Virtual Room in a Videoconference Device. */
VirtualRoomResource = Object extends Resource {
  /** Resource Type is always Device Component. */
  type: DeviceComponent,

  /** Room Identification inside the Device. */
  code: String,
}

/** 
 * Rooming capability allows a device to manage Virtual Rooms 
 * and thus to host multiple videoconferences.
 */
RoomingCapability = Object extends MixCapability {  
  rooms: List<0:n> of VirtualRoomResource
}

/** 
 * Identifier for a Videoconference Device or Virtual Room. 
 */
IdentifierResource = Object extends Resource {
  /** Resource Type is always Device Component. */
  type: DeviceComponent,

  /** Identifier value. */
  value: String
}

/** 
 * Capability tells that a device can starts videoconference
 * throught a server.
 */
SignalingClientCapability = Object extends MixCapability {  
  /** Signaling server identifier. */
  server: URN,
  /** Alias for device or list of aliases for device virtual rooms. */
  alias: String or IdentifierResource 
         or Map<String, String or IdentifierResource>
  TODO: Do we allow String aliases or only Identifier?
}

/** 
 * Capability tells that a device is signaling server through
 * which videoconference can be started/routed.
 */
SignalingServerCapability = Object extends MixCapability {  
  /** Maximum number of videoconference connections. */
  max-connections: * or Integer
}

/** 
 * Capability tells that a device is able to perform translation
 * between technologies that are specified for the capability.
 * By default all translations are allowed. Rules can be used 
 * to modify allowed translations. 
 *
 * @RequireCapability(Receive, Send)
 * @RequireTechnologyCount(2)
 */
TranslateCapability = Object extends DeviceCapability {  
  /** Rules can modify allowed translations. */
  rules: List<0:n> of Object {
    from: Object {
      technologies: * or List<1:n> of Technology,
      format: Format
    },
    to: Object {
      technologies: * or List<1:n> of Technology,
      format: Format
    },
    goal: Enum {Enable, Disable}    
  }
}

/** 
 * Stream capability tells that a device is able to perform streaming.
 *
 * @RequireCapability(Receive, Send)
 */
StreamCapability = Object extends DeviceCapability {  
}

/** 
 * Record capability tells that a device is able to perform recording.
 *
 * @RequireCapability(Receive, Send)
 */
RecordCapability = Object extends DeviceCapability {  
}

/**
 * Resource Database.
 */
ResourceDatabase = Object {
  /** List of all Resources. */
  resources: List<0:n> of Resource,

  /** Device topology. */
  deviceTopology: Object {
    /** List of all Device Resources. */
    nodes: List<0:n> of DeviceResource,

    /** List of all Edges between Devices. */
    edges: List<0:n> of Object {
      TODO
    },
    
    /** List of Rules for changing the default reachability of Devices. */
    rules: List<0:n> of Object {
      TODO
    }
  }
}

